AWSTemplateFormatVersion: 2010-09-09
Outputs:
  LambdaOutput:
    Description: Output from Lambda
    Value: !Sub |
      {
        'cfn_event': '${LambdaExecute.cfn_event}',
        'parameter1': '${LambdaExecute.parameter1}',
        'message': '${LambdaExecute.message}'
      }
Parameters:
  Parameter1:
    Description: 'Sample parameter to pass to Lambda'
    Type: String
    Default: 'Hello World'
Resources:
  LambdaExecute:
    Type: Custom::LambdaExecute
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - LambdaFunction
        - Arn
      Parameter1:
        Ref: Parameter1
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse

          def handler(event, context):
              # CFN action for the stack itself (Create, Update or Delete)
              cfn_event = event['RequestType']

              # Input from Parameter1 ("Hello World")
              parameter1 = event['ResourceProperties']['Parameter1']

              # Can be used for debugging, outputs to CloudWatch Logs
              print("CFN event: {}, Parameter1: {}".format(cfn_event, parameter1))

              # Sample response payload
              response = {
                "cfn_event": cfn_event,
                "parameter1": parameter1,
                "message": "a response from lambda!"
              }

              # This is used to signal back to CloudFormation for the custom resource
              if cfn_event in ["Create"]:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)

              elif cfn_event in ["Update", "Delete"]:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: python3.7
      Timeout: '900'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*