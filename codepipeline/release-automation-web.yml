AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys CodeBuild, CodeDeploy and CodePipeline to enable CI/CD of web cd deployments.

Parameters:
  WebCDKey:
    Description: Portal web source file
    Type: String
    Default: portal_web_cd.zip
  WebCDConfigKey:
    Description: Portal web config file
    Type: String
    Default: portal_web_config_cd.zip
  SourceBucket:
    Description: S3 bucket containing both portal web files
    Type: String
    Default: S3Bucket
  CodeBucket:
    Description: S3 bucket CodeBuild and CodeDeploy source
    Type: String
    Default: S3Bucket
  CodeDeployTargetTagKey:
    Description: Tag Key for CodeDeploy Deployment Group
    Type: String
    Default: Name
  CodeDeployTargetTagValue:
    Description: Tag Value for CodeDeploy Deployment Group
    Type: String
    Default: Value
    
Resources:
  WebCDCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-CodeBuild-Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${SourceBucket}/*"
                  - !Sub "arn:aws:s3:::${CodeBucket}/*"
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource:
                  - !Sub "arn:aws:s3:::${SourceBucket}/*"
                  - !Sub "arn:aws:s3:::${CodeBucket}/*"
  WebCDCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
                - pip install pytest
                - pip install lxml
            pre_build:
              commands:
                - echo CodeBuild initiated by $CODEBUILD_INITIATOR from source $CODEBUILD_SOURCE_REPO_URL
                - echo Build output logs to $CODEBUILD_LOG_PATH
                - echo Build started
            build:
              commands:
                  - echo Listing contents of portal_web_cd.zip
                  - ls -al
                  - echo Downloading CodeDeploy artifacts for deployment
                  - aws s3 cp s3://${CodeBucket}/codedeploy-appsec/webcd/ . --recursive
                  - echo Downloading completed
                  - cd $CODEBUILD_SRC_DIR_WebCDConfigCD
                  - echo Listing contents of ${WebCDConfigKey}
                  - ls -al
                  - echo Overwriting files in ${WebCDKey} with latest config from ${WebCDConfigKey}
                  - cp -r * ../00 --verbose
                  - echo Copy completed.
                  - cd ../00
                  - echo Running unit test for XML validation
                  - python -m pytest test_config_files.py -s
                  - rm -rfv .pytest_cache && rm -rfv test_config_files.py && rm -rfv __pycache__
                  - echo Listing the contents of the output artifact
                  - ls -al
            post_build:
              commands:
                - echo Build completed
          artifacts:
            files:
              - '**/*'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        Type: LINUX_CONTAINER
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      ServiceRole: !Ref WebCDCodeBuildRole
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: codebuild
          StreamName: webcd
  WebCDCodeDeploy:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: web-content-delivery
      ComputePlatform: Server
  WebCDCodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref WebCDCodeDeploy
      DeploymentGroupName: web-content-delivery
      Ec2TagFilters: 
        - Key: !Ref CodeDeployTargetTagKey
          Type: KEY_AND_VALUE
          Value: !Ref CodeDeployTargetTagValue
      ServiceRoleArn: !GetAtt WebCDCodeDeployRole.Arn
  WebCDCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket
  CodePipelineArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/*' ] ]
            Condition:
              StringNotEquals: 
                s3:x-amz-server-side-encryption: aws:kms
          -
            Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/*' ] ]
            Condition:
              Bool:
                aws:SecureTransport: false
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-CodePipeline-Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: '*'
  AppPipeline: 
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      Name: !Sub "${AWS::StackName}-Pipeline"
      RoleArn: 
        !GetAtt CodePipelineServiceRole.Arn
      Stages: 
        - 
          Name: Source
          Actions: 
            - 
              Name: WebCD
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts: 
                - Name: WebCD
              Configuration: 
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: !Ref WebCDKey
                PollForSourceChanges: false
              RunOrder: 1
            - 
              Name: WebCDConfig
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts: 
                - Name: WebCDConfig
              Configuration: 
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: !Ref WebCDConfigKey
                PollForSourceChanges: false
              RunOrder: 1
        - 
          Name: Build
          Actions: 
            - 
              Name: Build
              InputArtifacts: 
                - Name: WebCD
                - Name: WebCDConfig
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration: 
                ProjectName: !Ref WebCDCodeBuild
              OutputArtifacts: 
                - Name: BuildWebCD
              RunOrder: 1
        - 
          Name: Production
          Actions: 
            - 
              Name: Production
              InputArtifacts: 
                - 
                  Name: BuildWebCD
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration: 
                ApplicationName: !Ref WebCDCodeDeploy
                DeploymentGroupName: !Ref WebCDCodeDeployDeploymentGroup
              RunOrder: 1
      ArtifactStore: 
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-Pipeline-Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
            - CompleteMultipartUpload
          resources:
            ARN:
              - !Join [ '', [ 'arn:aws:s3:::', !Ref SourceBucket, '/', !Ref WebCDKey ] ]
      Targets:
        -
          Arn:
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: codepipeline-AppPipeline
